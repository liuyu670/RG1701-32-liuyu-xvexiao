<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mecol.bookshop_ssm.dao.StudentDao">
<select id="getAllStudentList" resultType="com.mecol.bookshop_ssm.entity.Student"
        parameterType="com.mecol.bookshop_ssm.entity.StudentSearch">
    select * from student
    <where>
        1=1
        <if test="null != username and '' != username">
            and username like  "%"#{username}"%"
        </if>
        <if test="null != sex and -1 != sex">
            and sex = #{sex}
        </if>
        <if test="null != status and -1 != status">
            and status = #{status}
        </if>
        <if test="null != levelId and -1 != levelId">
            and levelId = #{levelId}
        </if>
        <if test="null != createTimeStart and null != createTimeEnd and '' != createTimeStart and '' != createTimeEnd">
            and createTime between #{createTimeStart} and #{createTimeEnd}
        </if>
        <if test="'' != createTimeStart and '' == createTimeEnd">
            and createTime between #{createTimeStart} and curtime()
        </if>
        <if test="'' == createTimeStart and '' != createTimeEnd">
            and createTime between '1900-01-01 00:00:00' and #{createTimeEnd}
        </if>
        <if test="null != birthdayStart and null != birthdayEnd and '' != birthdayStart and '' != birthdayEnd">
            and birthday between #{birthdayStart} and #{birthdayEnd}
        </if>
        <if test="'' != birthdayStart and '' == birthdayEnd">
            and birthday between #{birthdayStart} and curtime()
        </if>
        <if test="'' == birthdayStart and '' != birthdayEnd">
            and birthday between '1900-01-01' and #{birthdayEnd}
        </if>
    </where>
    order by id

</select>
<delete id="deleteStudentById">
    delete from student where id=#{id}
</delete>
<select id="getStudentById" resultType="com.mecol.bookshop_ssm.entity.Student">
    select * from student where id=#{id}
</select>
<update id="updateStudent" parameterType="com.mecol.bookshop_ssm.entity.Student">
    update student
    <set>

        <if test="username != null">
            username = #{username},
        </if>
        <if test="password != null">
            password = #{password},
        </if>
        <if test="sex != null">
            sex = #{sex},
        </if>
        <if test="birthday != null">
            birthday = #{birthday},
        </if>
        <if test="email != null">
            email = #{email},
        </if>
        <if test="address != null">
            address = #{address},
        </if>
        <if test="note != null">
            note = #{note},
        </if>
        <if test="levelId != null">
            levelId = #{levelId},
        </if>
        <if test="createTime != null">
            createTime = #{createTime},
        </if>
        <if test="roleId != null">
            roleId = #{roleId},
        </if>
    </set>
    where id = #{id}
</update>
<update id="updateStudentStatusById">
    update student
    <set>
        <if test="status!=null">
            status=#{status}
        </if>
    </set>
    where id=#{id}
</update>
<select id="selStudentByStudentname" resultType="com.mecol.bookshop_ssm.entity.Student">

    select * from student where username=#{username}
</select>






<insert id="insertStudent" parameterType="com.mecol.bookshop_ssm.entity.Student">
    insert into student
    (username,password,sex,birthday,createTime,phone,address,email,levelId,note,status)
    values (#{username},#{password},#{sex},#{birthday},#{createTime},#{phone},#{address},
    #{email},#{levelId},#{note},#{status})

</insert>

    <select id="login" resultType="com.mecol.bookshop_ssm.entity.Student">
        select * from student
        <where>
            <if test="username!=null">
                and username=#{username}
            </if>
            <if test="password!=null">
                and password=#{password}
            </if>
        </where>

    </select>


    <resultMap id="studentResultMap" type="com.mecol.bookshop_ssm.entity.Student">
        <id property="id" column="id"/>
        <result property="username" column="username"/>

        <collection property="courseList" ofType="com.mecol.bookshop_ssm.entity.Course"
            javaType="ArrayList" column="id" select="com.mecol.bookshop_ssm.dao.CourseDao.selectCourseByStudentId"
                    fetchType="eager"
        >
            <result property="courseName" column="courseName"/>
            <result property="place" column="place"/>
        </collection>
    </resultMap>


    <!--下面因为连表查询 查出来 student表的id course表的id 同名 所以要起一个别名-->
    <select id="getStudentCourse" resultMap="studentResultMap">

      <!--
        这里依然存在 pageHepler分页不对的问题
        SELECT s.id AS sid ,s.username ,c.courseName,c.place
        FROM student s
        INNER JOIN
        s_c_m m ON s.id=m.s_id
        INNER JOIN course c ON m.c_id=c.id
        order by s.id
        -->
        select distinct id ,s.username
        from student s
        inner join
        s_c_m m on  id=m.s_id
        order by  id
    </select>

    <select id="getStudentCourseByTeacherId" resultMap="studentResultMap"
    >
        SELECT s.id AS sid ,s.username ,c.courseName,c.place
        FROM student s
        INNER JOIN
        s_c_m m ON s.id=m.s_id
        INNER JOIN course c ON m.c_id=c.id
        where c.teacherId=#{teacherId}
        order by s.id
    </select>


    <select id="getStudentByCourseId" resultType="com.mecol.bookshop_ssm.entity.Student"
    >
        SELECT s.username
        FROM student s
        where s.id IN ( select s_id from s_c_m m where m.c_id=#{id}  )

    </select>


</mapper>